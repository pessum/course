#include <iostream>
#include <string>
#include <windows.h>
#include <bitset>
#include <sstream>
#include <algorithm>
#include <cstdlib>
#include <ctime>
#include <chrono>
#include <fstream>
using namespace std;

HANDLE N = GetStdHandle(STD_OUTPUT_HANDLE);

void wait(double seconds)
{
	clock_t endwait;
	endwait = clock() + seconds * CLOCKS_PER_SEC;
	while (clock() < endwait) {}
}
void gotoxy(int x, int y)
{
	HANDLE hConsole;
	hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
	COORD coord;
	coord.X = x;
	coord.Y = y;
	SetConsoleCursorPosition(hConsole, coord);
}

bool check_space(char s_1, char s_2)
{

	if (s_1 == s_2 && s_1 == ' ')
	{
		return 1;
	}
	else
	{
		return 0;
	}
}
bool check_punctuation(char s_1, char s_2)
{
	if ((s_1 == s_2) && ((s_1 == '.') || (s_1 == ',') || (s_1 == ';') || (s_1 == ':') || (s_1 == '?') || (s_1 == '!') || (s_1 == '/') || (s_1 == '(') || (s_1 == ')') || (s_1 == '"')))
	{
		return 1;
	}
	else
	{
		return 0;
	}

}

bool is_digits(const string &str)
{
	return str.find_first_not_of("0123456789") == string::npos;
}
bool is_letters(const string &str)
{
	return str.find_first_not_of("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ") == string::npos;
}


int *pre_kmp(string pattern)
{
	int size = pattern.size();
	int *pi = new int[size];
	pi[0] = 0;
	int k = 0;
	for (int i = 1; i < size; i++)
	{
		while (k > 0 && pattern[k] != pattern[i])
		{
			k = pi[k - 1];
		}
		if (pattern[k] == pattern[i])
		{
			k = k + 1;
		}
		pi[i] = k;
	}

	return pi;
}

void kmp(string text, string pattern)
{
	int* pi = pre_kmp(pattern);
	int match = 0;
	SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
	cout << "Индексы: ";
	SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
	for (int current = 0; current < text.length(); current++)
	{
		while (match > 0 && pattern[match] != text[current])
			match = pi[match - 1];

		if (pattern[match] == text[current])
			match = match + 1;

		if (match == (pattern.length()))
		{
			cout << current - (pattern.length() - 1) << " ";
			match = pi[match - 1];
		}
	}
}

void linear(string text, string pattern)
{
	int M_1 = pattern.length();
	int N_1 = text.length();
	SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
	cout << "Индексы: ";
	SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
	for (int i = 0; i <= N_1 - M_1; i++) {
		int j;

		for (j = 0; j < M_1; j++)
			if (text[i + j] != pattern[j])
				break;

		if (j == M_1)
			cout << i << " ";

	}
}

int main() {
	setlocale(LC_ALL, "Russian");
	int answer_i = 0;
	while (answer_i != 5) {
		SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
		cout << "Выберите лабораторную работу: " << endl;
		SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
		cout << "1. Типы данных и их внутреннее представление в памяти" << endl;
		cout << "2. Одномерные статические массивы" << endl;
		cout << "3. Указатели" << endl;
		cout << "4. Текстовые строки" << endl;
		cout << "5. ";
		SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
		cout << "Выход" << endl;
		SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
		cin >> answer_i;
		system("CLS");
	
		switch (answer_i)
		{
		case (1): {
			SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
			cout << "Размер памяти (в байтах), выделенный под типы данных: " << endl;
			SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
			cout << "int: ";
			SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
			cout << sizeof(int) << endl;
			SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
			cout << "short int: ";
			SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
			cout << sizeof(short int) << endl;
			SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
			cout << "long int: ";
			SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
			cout << sizeof(long int) << endl;
			SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
			cout << "float: ";
			SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
			cout << sizeof(float) << endl;
			SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
			cout << "double: ";
			SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
			cout << sizeof(double) << endl;
			SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
			cout << "long double: ";
			SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
			cout << sizeof(long double) << endl;
			SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
			cout << "char: ";
			SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
			cout << sizeof(char) << endl;
			SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
			cout << "bool: ";
			SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
			cout << sizeof(bool) << endl;
			SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
			bool answer;
			int x, num_1;
			int quantity = 32;
			int mask = 1 << (quantity - 1);
			cout << endl;
			cout << "Введите значение int: " << endl;
			SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
			cin >> x;
			SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
			for (int i = 1; i <= quantity; i++)
			{

				cout << (x & mask ? '1' : '0');
				x <<= 1;

				if (i % 8 == 0)
				{
					cout << " ";
				}
				if ((i % 31) == 1)
				{
					cout << " ";
					SetConsoleTextAttribute(N, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
				}
			}
			SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
			cout << endl;

			union fl {
				float a1;
				int a;

			};
			cout << endl;
			cout << "Введите значение float: " << endl;
			fl u;
			SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
			cin >> u.a1;
			SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
			for (int i = 1; i <= quantity; i++)
			{
				cout << (u.a & mask ? '1' : '0');
				u.a <<= 1;

				if ((i % 31) == 1)
				{
					cout << " ";
					SetConsoleTextAttribute(N, FOREGROUND_BLUE | FOREGROUND_INTENSITY);

				}
				if (i == 9)
				{
					cout << " ";
					SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_INTENSITY);
				}
			}
			SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
			cout << endl;

			union fl_1 {
				double a2;
				long long b;
			};
			cout << endl;
			cout << "Введите значение double: " << endl;
			fl_1 y;
			SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
			cin >> y.a2;
			SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
			auto num = bitset<64>(1);
			for (int i = 63; i >= 0; i--)
			{
				cout << bitset<64>(y.b)[i];

				if (i == 63) {
					cout << " ";
					SetConsoleTextAttribute(N, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
				}
				if (i == 52) {
					cout << " ";
					SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_INTENSITY);
				}
			}

			cout << endl;
			cout << endl;

			break;
		}
		case (2): {
			int arr[100];
			int max, min;

			int answer;
			answer = 0;


			max = arr[0];
			min = 0;
			srand(time(NULL));;
			for (int i = 0; i < 100; i++) {
				arr[i] = rand() % 199 - 99;
			}

			while (answer != 9) {
				SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cout << "Введите номер задания: " << endl;
				SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);

				cout << "1. Создает целочисленный массив размерности N = 100. Элементы массивы должны принимать случайное значение в диапазоне от -99 до 99." << endl;
				cout << "2. Отсортировать заданный в пункте 1 элементы массива […] сортировкой (от меньшего к большему). Определить время, затраченное на сортировку, используя библиотеку chrono." << endl;
				cout << "3. Найти максимальный и минимальный элемент массива. Подсчитайте время поиска этих элементов в отсортированном массиве и неотсортированном, используя библиотеку chrono." << endl;
				cout << "4. Выводит среднее значение (если необходимо, число нужно округлить) максимального и минимального значения. Выводит индексы всех элементов, которые равны этому значению, и их количество." << endl;
				cout << "5. Выводит количество элементов в отсортированном массиве, которые меньше числа a, которое инициализируется пользователем." << endl;
				cout << "6. Выводит количество элементов в отсортированном массиве, которые больше числа b, которое инициализируется пользователем." << endl;
				cout << "7. Выводит информацию о том, есть ли введенное пользователем число в отсортированном массиве. Реализуйте алгоритм бинарного поиска. Сравните скорость его работы с обычным перебором. (*)" << endl;
				cout << "8. Меняет местами элементы массива, индексы которых вводит пользователь. Выведите скорость обмена, используя библиотеку chrono." << endl;
				cout << "9.";
				SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cout << " <———" << endl;
				SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cin >> answer;
				system("CLS");


				switch (answer)
				{
				case (1): {

					SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					cout << "Неотсортированный массив: " << endl;
					SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					for (int i = 0; i < 100; i++) {

						cout << i << "|  " << arr[i] << " " << endl;


					}
					break;
				}


				case (2): {

					int h;
					auto start2 = chrono::high_resolution_clock::now();
					for (int i = 0; i < 100; i++) {
						for (int j = 0; j < 99 - i; j++) {
							if (arr[j] > arr[j + 1]) {

								h = arr[j];
								arr[j] = arr[j + 1];
								arr[j + 1] = h;
							}
						}
					}
					SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					cout << "Отсортированный массив: " << endl;
					SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					for (int i = 0; i < 100; i++)
					{
						cout << i << "|  " << arr[i] << " " << endl;
					}
					auto end2 = chrono::high_resolution_clock::now();
					chrono::duration<float> duration2 = end2 - start2;


					cout.setf(ios::fixed, ios::floatfield);
					cout.precision(7);
					cout << endl;
					SetConsoleTextAttribute(N, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
					cout << "Время, потраченное на сортировку: ";
					SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					cout << duration2.count() << endl;
					cout << endl;

					break;
				}


				case (3): {
					int h;
					auto start1 = chrono::high_resolution_clock::now();
					for (int i = 0; i < 100; i++) {
						if (arr[i] > max)
						{
							max = arr[i];
						}
						if (arr[i] < min)
						{
							min = arr[i];
						}
					}
					auto end1 = chrono::high_resolution_clock::now();
					chrono::duration<float> duration1 = end1 - start1;

					SetConsoleTextAttribute(N, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
					cout << "Минимальный элемент: ";
					SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					cout << min << endl;

					SetConsoleTextAttribute(N, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
					cout << "Максимальный элемент: ";
					SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					cout << max << endl;

					cout.setf(ios::fixed, ios::floatfield);
					cout.precision(7);
					cout << endl;
					SetConsoleTextAttribute(N, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
					cout << "Время, потраченное на поиск max и min (в неотсортированном массиве): ";
					SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					cout << duration1.count() << endl;
					cout << endl;
					for (int i = 0; i < 100; i++) {
						for (int j = 0; j < 99 - i; j++) {
							if (arr[j] > arr[j + 1]) {

								h = arr[j];
								arr[j] = arr[j + 1];
								arr[j + 1] = h;
							}
						}
					}

					auto start3 = chrono::high_resolution_clock::now();
					for (int i = 0; i < 100; i++) {
						if (arr[i] > max)
						{
							max = arr[i];
						}
						if (arr[i] < min)
						{
							min = arr[i];
						}
					}
					auto end3 = chrono::high_resolution_clock::now();

					chrono::duration<float> duration3 = end3 - start3;


					cout.setf(ios::fixed, ios::floatfield);
					cout.precision(7);
					cout << endl;
					SetConsoleTextAttribute(N, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
					cout << "Время, потраченное на поиск max и min (в отсортированном массиве): ";
					SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					cout << duration3.count() << endl;
					cout << endl;

					break;

				}


				case 4: {

					for (int i = 0; i < 100; i++) {
						if (arr[i] > max)
						{
							max = arr[i];
						}
						if (arr[i] < min)
						{
							min = arr[i];
						}
					}
					int sr;
					int am1 = 0;
					sr = (max + (-min)) / 2;
					SetConsoleTextAttribute(N, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
					cout << "Среднее значение max и min: ";
					SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					cout << sr << endl;
					cout << endl;
					SetConsoleTextAttribute(N, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
					cout << "Индексы элементов, равных среднему значению: ";
					SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					for (int i = 0; i < 100; i++) {
						if ((arr[i] == sr) || (-arr[i] == sr)) {
							cout << i << " ";
							am1++;
						}
					}
					cout << endl;
					SetConsoleTextAttribute(N, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
					cout << "Количество элементов, равных среднему значению: ";
					SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					cout << am1;
					cout << endl;
					cout << endl;
					break;
				}

				case (5): {
					int a;
					int am2 = 0;
					SetConsoleTextAttribute(N, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
					cout << "Введите число a: ";
					SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					cin >> a;
					for (int i = 0; i < 100; i++) {
						if (arr[i] < a) {
							am2++;
						}
					}
					cout << endl;
					SetConsoleTextAttribute(N, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
					cout << "Количество элементов, которые меньше чем a: ";
					SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					cout << am2;
					cout << endl;
					break;
				}
				case (6): {
					int b;
					int am3 = 0;
					SetConsoleTextAttribute(N, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
					cout << "Введите число b: ";
					SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					cin >> b;

					for (int i = 0; i < 100; i++) {
						if (arr[i] > b) {
							am3++;
						}
					}
					cout << endl;

					SetConsoleTextAttribute(N, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
					cout << "Количество элементов, которые больше чем b: ";
					SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					cout << am3;
					cout << endl;
					break;
				}

				case(8): {

					int mn1, mn2, mn3;
					SetConsoleTextAttribute(N, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
					cout << "Введите индексы элементов, которые необходимо поменять местами: ";
					SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					int h;
					for (int i = 0; i < 100; i++) {
						for (int j = 0; j < 99 - i; j++) {
							if (arr[j] > arr[j + 1]) {

								h = arr[j];
								arr[j] = arr[j + 1];
								arr[j + 1] = h;
							}
						}
					}
					auto start4 = chrono::high_resolution_clock::now();
					cin >> mn1;
					cin >> mn2;
					mn3 = arr[mn1];
					arr[mn1] = arr[mn2];
					arr[mn2] = mn3;
					auto end4 = chrono::high_resolution_clock::now();
					for (int i = 0; i < 100; i++) {
						cout << i << "|  " << arr[i] << " " << endl;
					}
					chrono::duration<float> duration4 = end4 - start4;

					cout.setf(ios::fixed, ios::floatfield);
					cout.precision(7);
					cout << endl;
					SetConsoleTextAttribute(N, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
					cout << "Время, потраченное на обмен переменных: ";
					SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					cout << duration4.count() << endl;
					cout << endl;
					break;
				}

				case (7): {


					int h;
					for (int i = 0; i < 100; i++) {
						for (int j = 0; j < 99 - i; j++) {
							if (arr[j] > arr[j + 1]) {

								h = arr[j];
								arr[j] = arr[j + 1];
								arr[j + 1] = h;
							}
						}
					}
					int n;
					SetConsoleTextAttribute(N, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
					cout << "Введите искомый элемент: ";
					SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					cin >> n;

					bool fl = false;
					int left = 0;
					int right = 99;
					int middle;

					auto start5 = chrono::high_resolution_clock::now();
					while ((left <= right) && (fl != true)) {
						middle = (left + right) / 2;

						if (arr[middle] == n) fl = true;
						if (arr[middle] > n) right = middle - 1;
						else left = middle + 1;
					}
					auto end5 = chrono::high_resolution_clock::now();

					SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					cout << "///////////////////////////////////" << endl;
					cout << "Бинарный поиск: " << endl;
					SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);

					SetConsoleTextAttribute(N, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
					if (fl == 1) {
						cout << "Элемент ";
						SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
						cout << n;
						SetConsoleTextAttribute(N, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
						cout << " находится под номером ";
						SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
						cout << middle << endl;
					}
					else cout << "В массиве этого элемента нет.";

					chrono::duration<float> duration5 = end5 - start5;


					cout.setf(ios::fixed, ios::floatfield);
					cout.precision(7);
					cout << endl;
					SetConsoleTextAttribute(N, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
					cout << "Время, потраченное на бинарный поиск: ";
					SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					cout << duration5.count() << endl;
					cout << endl;
					int key = 0;
					SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					cout << "///////////////////////////////////" << endl;
					cout << "Линейный поиск: " << endl;
					SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					auto start6 = chrono::high_resolution_clock::now();
					for (int i = 0; i < 100; i++) {
						if (n == arr[i]) {
							SetConsoleTextAttribute(N, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
							cout << "Элемент ";
							SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
							cout << n;
							SetConsoleTextAttribute(N, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
							cout << " находится под номером ";
							SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
							cout << i << endl;
							key = 1;
						}
					}
					if (key == 0) {
						SetConsoleTextAttribute(N, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
						cout << "В массиве этого элемента нет.";
						SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					}
					auto end6 = chrono::high_resolution_clock::now();
					chrono::duration<float> duration6 = end6 - start6;
					cout.setf(ios::fixed, ios::floatfield);
					cout.precision(7);
					cout << endl;
					SetConsoleTextAttribute(N, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
					cout << "Время, потраченное на линейный поиск (перебором): ";
					SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
					cout << duration6.count() << endl;
					cout << endl;
					cout << endl;

					break;
				}

				}




			}



			break;
		}
		case (3): {
			srand(time(NULL));;
			int answer, answer_1, answer_2;
			answer = 0;
			answer_2 = 0;
			answer_1 = 0;
			while (answer_1 != 9) {
				SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cout << "Выберите задание: " << endl;
				cout << endl;
				SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cout << "1. Заполнить матрицу по спирали" << endl;
				cout << "2. Заполнить матрицу 'змейкой'" << endl;
				cout << "3. Переставить блоки матрицы (пункт а)'" << endl;
				cout << "4. Переставить блоки матрицы (пункт б)'" << endl;
				cout << "5. Переставить блоки матрицы (пункт в)'" << endl;
				cout << "6. Переставить блоки матрицы (пункт г)'" << endl;
				cout << "7. Сортировать элементы матрицы " << endl;
				cout << "8. Уменьшить / увеличить / умножить / разделить элементы матрицы на введенное число " << endl;
				cout << "9.";
				SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cout << " <———" << endl;
				SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cin >> answer_1;
				system("CLS");
				switch (answer_1)
				{
				case (1): {
					do {
						SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
						cout << "Выберите размер матрицы: " << endl;
						SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
						cout << endl;
						cout << "1. Матрица 6x6" << endl;
						cout << "2. Матрица 8x8" << endl;
						cout << "3. Матрица 10x10" << endl;
						cout << "4.";
						SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
						cout << " <———" << endl;
						SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
						cin >> answer;
						system("CLS");

						switch (answer)
						{
						case (1): {


							int arr[6][6];
							for (int i = 0; i < 6; i++) {
								for (int j = 0; j < 6; j++) {
									*(*(arr + i) + j) = 10 + rand() % 90;

								}
							}
							int *ptr = &arr[0][0];

							////////////////////////////////// 1
							gotoxy(5, 10);
							for (int i = 0; i < 5; i++)
							{
								cout << ptr[i] << " ";
								wait(0.1);

							}
							int cc = 10;
							for (int i = 5; i < 10; i++)
							{

								gotoxy(20, cc);
								cc++;
								cout << ptr[i] << " ";
								wait(0.1);
							}
							int cc1 = 19;
							for (int i = 10; i < 15; i++)
							{
								gotoxy(cc1, 15);
								cc1--;
								cc1--;
								cc1--;

								cout << " " << ptr[i];

								wait(0.1);
							}
							int cc2 = 15;
							for (int i = 15; i < 20; i++) {
								gotoxy(5, cc2);
								cc2--;
								cout << ptr[i] << endl;
								wait(0.1);
							}
							////////////////////////////////// 2
							gotoxy(8, 11);
							for (int i = 20; i < 24; i++)
							{
								cout << ptr[i] << " ";
								wait(0.1);
							}
							gotoxy(40, 20);
							int ccc = 12;
							for (int i = 24; i < 27; i++)
							{

								gotoxy(17, ccc);
								ccc++;
								cout << ptr[i] << endl;
								wait(0.1);
							}
							int ccc1 = 13;
							for (int i = 27; i < 30; i++)
							{
								gotoxy(ccc1, 14);
								ccc1--;
								ccc1--;
								ccc1--;

								cout << " " << ptr[i];

								wait(0.1);
							}

							int ccc2 = 13;
							for (int i = 30; i < 32; i++) {
								gotoxy(8, ccc2);
								ccc2--;
								cout << ptr[i] << endl;
								wait(0.1);
							}
							////////////////////////////////// 3
							gotoxy(11, 12);
							for (int i = 32; i < 34; i++)
							{
								cout << ptr[i] << " ";
								wait(0.1);
							}
							int cccc = 13;
							for (int i = 34; i < 35; i++)
							{

								gotoxy(14, cccc);
								cccc++;
								cout << ptr[i] << endl;
								wait(0.1);
							}
							int сссс1 = 10;
							for (int i = 35; i < 36; i++)
							{
								gotoxy(сссс1, 13);
								сссс1--;
								сссс1--;
								сссс1--;

								cout << " " << ptr[i];

								wait(0.1);
							}
							gotoxy(0, 0);
							break;


						}

						case (2): {

							int arr[8][8];
							for (int i = 0; i < 8; i++) {
								for (int j = 0; j < 8; j++) {
									*(*(arr + i) + j) = 10 + rand() % 90;
								}
							}
							int *ptr = &arr[0][0];
							////////////////////////////////// 1
							gotoxy(5, 10);
							for (int i = 0; i < 8; i++)
							{
								cout << ptr[i] << " ";
								wait(0.1);

							}
							int cc = 11;
							for (int i = 8; i < 15; i++)
							{

								gotoxy(26, cc);
								cc++;
								cout << ptr[i] << " ";
								wait(0.1);
							}
							int cc1 = 22;
							for (int i = 15; i < 21; i++)
							{
								gotoxy(cc1, 17);
								cc1--;
								cc1--;
								cc1--;

								cout << " " << ptr[i];

								wait(0.1);
							}
							int cc2 = 17;
							for (int i = 21; i < 28; i++) {
								gotoxy(5, cc2);
								cc2--;
								cout << ptr[i] << endl;
								wait(0.1);
							}
							////////////////////////////////// 2
							gotoxy(8, 11);
							for (int i = 28; i < 34; i++)
							{
								cout << ptr[i] << " ";
								wait(0.1);
							}
							gotoxy(40, 20);
							int ccc = 12;
							for (int i = 34; i < 39; i++)
							{

								gotoxy(23, ccc);
								ccc++;
								cout << ptr[i] << endl;
								wait(0.1);
							}
							int ccc1 = 19;
							for (int i = 39; i < 43; i++)
							{
								gotoxy(ccc1, 16);
								ccc1--;
								ccc1--;
								ccc1--;

								cout << " " << ptr[i];

								wait(0.1);
							}

							int ccc2 = 16;
							for (int i = 43; i < 48; i++) {
								gotoxy(8, ccc2);
								ccc2--;
								cout << ptr[i] << endl;
								wait(0.1);
							}
							////////////////////////////////// 3
							gotoxy(11, 12);
							for (int i = 48; i < 51; i++)
							{
								cout << ptr[i] << " ";
								wait(0.1);
							}
							int cccc = 12;
							for (int i = 51; i < 55; i++)
							{

								gotoxy(20, cccc);
								cccc++;
								cout << ptr[i] << endl;
								wait(0.1);
							}
							int сссс1 = 16;
							for (int i = 55; i < 58; i++)
							{
								gotoxy(сссс1, 15);
								сссс1--;
								сссс1--;
								сссс1--;

								cout << " " << ptr[i];

								wait(0.1);
							}
							int cccc2 = 14;
							for (int i = 58; i < 60; i++) {
								gotoxy(11, cccc2);
								cccc2--;
								cout << ptr[i] << endl;
								wait(0.1);
							}
							////////////////////////////////// 4
							gotoxy(14, 13);
							for (int i = 60; i < 62; i++)
							{
								cout << ptr[i] << " ";
								wait(0.1);
							}
							int cccc3 = 14;
							for (int i = 62; i < 63; i++)
							{

								gotoxy(17, cccc3);
								cccc3++;
								cout << ptr[i] << endl;
								wait(0.1);
							}
							int сссс4 = 13;
							for (int i = 63; i < 64; i++)
							{
								gotoxy(сссс4, 14);
								сссс4--;
								сссс4--;
								сссс4--;

								cout << " " << ptr[i];

								wait(0.1);
							}
							gotoxy(0, 0);
							break;
						}
						case (3): {

							int arr[10][10];
							for (int i = 0; i < 10; i++) {
								for (int j = 0; j < 10; j++) {
									*(*(arr + i) + j) = 10 + rand() % 90;
								}
							}
							int *ptr = &arr[0][0];
							////////////////////////////////// 1
							gotoxy(5, 10);
							for (int i = 0; i < 10; i++)
							{
								cout << ptr[i] << " ";
								wait(0.1);

							}
							int ccg = 11;
							for (int i = 10; i < 19; i++)
							{

								gotoxy(32, ccg);
								ccg++;
								cout << ptr[i] << " ";
								wait(0.1);
							}
							int ccg1 = 28;
							for (int i = 19; i < 28; i++)
							{
								gotoxy(ccg1, 19);
								ccg1--;
								ccg1--;
								ccg1--;

								cout << " " << ptr[i];

								wait(0.1);
							}
							int ccg2 = 18;
							for (int i = 28; i < 36; i++) {
								gotoxy(5, ccg2);
								ccg2--;
								cout << ptr[i] << endl;
								wait(0.1);
							}
							////////////////////////////////// 2
							gotoxy(8, 11);
							for (int i = 36; i < 44; i++)
							{
								cout << ptr[i] << " ";
								wait(0.1);

							}
							int cc = 12;
							for (int i = 44; i < 51; i++)
							{

								gotoxy(29, cc);
								cc++;
								cout << ptr[i] << " ";
								wait(0.1);
							}
							int cc1 = 25;
							for (int i = 51; i < 57; i++)
							{
								gotoxy(cc1, 18);
								cc1--;
								cc1--;
								cc1--;

								cout << " " << ptr[i];

								wait(0.1);
							}
							int cc2 = 18;
							for (int i = 57; i < 64; i++) {
								gotoxy(8, cc2);
								cc2--;
								cout << ptr[i] << endl;
								wait(0.1);
							}
							////////////////////////////////// 3
							gotoxy(11, 12);
							for (int i = 64; i < 70; i++)
							{
								cout << ptr[i] << " ";
								wait(0.1);
							}
							int ccc = 13;
							for (int i = 70; i < 75; i++)
							{

								gotoxy(26, ccc);
								ccc++;
								cout << ptr[i] << endl;
								wait(0.1);
							}
							int ccc1 = 22;
							for (int i = 75; i < 79; i++)
							{
								gotoxy(ccc1, 17);
								ccc1--;
								ccc1--;
								ccc1--;

								cout << " " << ptr[i];

								wait(0.1);
							}

							int ccc2 = 17;
							for (int i = 79; i < 84; i++) {
								gotoxy(11, ccc2);
								ccc2--;
								cout << ptr[i] << endl;
								wait(0.1);
							}
							////////////////////////////////// 4
							gotoxy(14, 13);
							for (int i = 84; i < 87; i++)
							{
								cout << ptr[i] << " ";
								wait(0.1);
							}
							int cccc = 13;
							for (int i = 87; i < 91; i++)
							{

								gotoxy(23, cccc);
								cccc++;
								cout << ptr[i] << endl;
								wait(0.1);
							}
							int сссс1 = 19;
							for (int i = 91; i < 94; i++)
							{
								gotoxy(сссс1, 16);
								сссс1--;
								сссс1--;
								сссс1--;

								cout << " " << ptr[i];

								wait(0.1);
							}
							int cccc2 = 15;
							for (int i = 94; i < 96; i++) {
								gotoxy(14, cccc2);
								cccc2--;
								cout << ptr[i] << endl;
								wait(0.1);
							}
							////////////////////////////////// 5
							gotoxy(17, 14);
							for (int i = 96; i < 98; i++)
							{
								cout << ptr[i] << " ";
								wait(0.1);
							}
							int cccc3 = 15;
							for (int i = 98; i < 99; i++)
							{

								gotoxy(20, cccc3);
								cccc3++;
								cout << ptr[i] << endl;
								wait(0.1);
							}
							int сссс4 = 16;
							for (int i = 99; i < 100; i++)
							{
								gotoxy(сссс4, 15);
								сссс4--;
								сссс4--;
								сссс4--;

								cout << " " << ptr[i];

								wait(0.1);
							}
							gotoxy(0, 0);
							break;
						}
						}
					} while (answer != 4);
					break;

				}
				case(2): {
					do {
						SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
						cout << "Выберите размер матрицы: " << endl;
						SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
						cout << endl;
						cout << "1. Матрица 6x6" << endl;
						cout << "2. Матрица 8x8" << endl;
						cout << "3. Матрица 10x10" << endl;
						cout << "4.";
						SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
						cout << " <———" << endl;
						SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
						cin >> answer;
						system("CLS");

						switch (answer)
						{
						case (1): {
							int arr[6][6];
							for (int i = 0; i < 6; i++) {
								for (int j = 0; j < 6; j++) {
									*(*(arr + i) + j) = 10 + rand() % 90;
								}
							}
							int h = 0;
							int i1 = 0;
							int p1 = 20;
							int p2 = 23;
							while (h != 36) {
								int *ptr = &arr[0][0];
								gotoxy(5, 10);
								int cc = 10;
								for (int i = 0 + i1; i < 6 + i1; i++)
								{

									gotoxy(p1, cc);
									cc++;
									cout << ptr[i] << " ";
									wait(0.1);
									h++;
								}
								int cc1 = 15;
								for (int i = 6 + i1; i < 12 + i1; i++) {
									gotoxy(p2, cc1);
									cc1--;
									cout << ptr[i] << endl;
									wait(0.1);
									h++;
								}
								i1 += 12;
								p1 += 6;
								p2 += 6;

							}

							gotoxy(0, 0);

							break;
						}
						case (2): {
							int arr[8][8];

							for (int i = 0; i < 8; i++) {
								for (int j = 0; j < 8; j++) {
									*(*(arr + i) + j) = 10 + rand() % 90;

								}
							}
							int *ptr = &arr[0][0];
							int h = 0;
							int i1 = 0;
							int p1 = 20;
							int p2 = 23;
							while (h != 64) {
								int *ptr = &arr[0][0];
								gotoxy(5, 10);
								int cc = 10;
								for (int i = 0 + i1; i < 8 + i1; i++)
								{

									gotoxy(p1, cc);
									cc++;
									cout << ptr[i] << " ";
									wait(0.1);
									h++;
								}
								int cc1 = 17;
								for (int i = 8 + i1; i < 16 + i1; i++) {
									gotoxy(p2, cc1);
									cc1--;
									cout << ptr[i] << endl;
									wait(0.1);
									h++;
								}
								i1 += 16;
								p1 += 6;
								p2 += 6;

							}
							gotoxy(0, 0);

							break;
						}
						case (3): {
							int arr[10][10];

							for (int i = 0; i < 10; i++) {
								for (int j = 0; j < 10; j++) {
									*(*(arr + i) + j) = 10 + rand() % 90;


								}
							}
							int *ptr = &arr[0][0];
							int h = 0;
							int i1 = 0;
							int p1 = 20;
							int p2 = 23;
							while (h != 100) {
								int *ptr = &arr[0][0];
								gotoxy(5, 10);
								int cc = 10;
								for (int i = 0 + i1; i < 10 + i1; i++)
								{

									gotoxy(p1, cc);
									cc++;
									cout << ptr[i] << " ";
									wait(0.1);
									h++;
								}
								int cc1 = 19;
								for (int i = 10 + i1; i < 20 + i1; i++) {
									gotoxy(p2, cc1);
									cc1--;
									cout << ptr[i] << endl;
									wait(0.1);
									h++;
								}
								i1 += 20;
								p1 += 6;
								p2 += 6;


							}
							gotoxy(0, 0);

							break;
						}

						}

					} while (answer != 4);
					break;
				}
				case(3): {
					do {
						SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
						cout << "Выберите размер матрицы: " << endl;
						SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
						cout << endl;
						cout << "1. Матрица 6x6" << endl;
						cout << "2. Матрица 8x8" << endl;
						cout << "3. Матрица 10x10" << endl;
						cout << "4.";
						SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
						cout << " <———" << endl;
						SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
						cin >> answer;
						system("CLS");

						switch (answer)
						{
						case (1): {

							int arr[6][6];
							for (int i = 0; i < 6; i++) {
								for (int j = 0; j < 6; j++) {
									arr[i][j] = 10 + rand() % 90;
								}
							}
							for (int i = 0; i < 6; i++) {
								for (int j = 0; j < 6; j++) {
									cout << arr[i][j] << " ";
								}
								cout << endl;
							}
							cout << endl;
							for (int i = 0; i < 3; ++i)
								for (int j = 0; j < 3; ++j) {
									int temp = arr[i][j];
									arr[i][j] = arr[i + 3][j];
									arr[i + 3][j] = arr[i + 3][j + 3];
									arr[i + 3][j + 3] = arr[i][j + 3];
									arr[i][j + 3] = temp;
								}
							for (int i = 0; i < 6; i++) {
								for (int j = 0; j < 6; j++) {
									cout << arr[i][j] << " ";
								}
								cout << endl;
							}
							gotoxy(0, 15);

							break;
						}
						case (2): {

							int arr[8][8];
							for (int i = 0; i < 8; i++) {
								for (int j = 0; j < 8; j++) {
									arr[i][j] = 10 + rand() % 90;
								}
							}
							for (int i = 0; i < 8; i++) {
								for (int j = 0; j < 8; j++) {
									cout << arr[i][j] << " ";
								}
								cout << endl;
							}
							cout << endl;
							for (int i = 0; i < 4; ++i)
								for (int j = 0; j < 4; ++j) {
									int temp = arr[i][j];
									arr[i][j] = arr[i + 4][j];
									arr[i + 4][j] = arr[i + 4][j + 4];
									arr[i + 4][j + 4] = arr[i][j + 4];
									arr[i][j + 4] = temp;
								}
							for (int i = 0; i < 8; i++) {
								for (int j = 0; j < 8; j++) {
									cout << arr[i][j] << " ";
								}
								cout << endl;
							}
							gotoxy(0, 20);

							break;
						}
						case (3): {

							int arr[10][10];
							for (int i = 0; i < 10; i++) {
								for (int j = 0; j < 10; j++) {
									arr[i][j] = 10 + rand() % 90;
								}
							}
							for (int i = 0; i < 10; i++) {
								for (int j = 0; j < 10; j++) {
									cout << arr[i][j] << " ";
								}
								cout << endl;
							}
							cout << endl;
							for (int i = 0; i < 5; ++i)
								for (int j = 0; j < 5; ++j) {
									int temp = arr[i][j];
									arr[i][j] = arr[i + 5][j];
									arr[i + 5][j] = arr[i + 5][j + 5];
									arr[i + 5][j + 5] = arr[i][j + 5];
									arr[i][j + 5] = temp;
								}
							for (int i = 0; i < 10; i++) {
								for (int j = 0; j < 10; j++) {
									cout << arr[i][j] << " ";
								}
								cout << endl;
							}
							gotoxy(0, 22);

							break;
						}
						}
					} while (answer != 4);
					break;
				}
				case(4): {
					do {
						SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
						cout << "Выберите размер матрицы: " << endl;
						SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
						cout << endl;
						cout << "1. Матрица 6x6" << endl;
						cout << "2. Матрица 8x8" << endl;
						cout << "3. Матрица 10x10" << endl;
						cout << "4.";
						SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
						cout << " <———" << endl;
						SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
						cin >> answer;
						system("CLS");

						switch (answer)
						{
						case (1): {

							int arr[6][6];
							for (int i = 0; i < 6; i++) {
								for (int j = 0; j < 6; j++) {
									arr[i][j] = 10 + rand() % 90;
								}
							}
							for (int i = 0; i < 6; i++) {
								for (int j = 0; j < 6; j++) {
									cout << arr[i][j] << " ";
								}
								cout << endl;
							}
							cout << endl;
							for (int i = 0; i < 3; ++i)
								for (int j = 0; j < 3; ++j) {
									int temp = arr[i][j];
									arr[i][j] = arr[i + 3][j + 3];
									arr[i + 3][j + 3] = temp;
									temp = arr[i + 3][j];
									arr[i + 3][j] = arr[i][j + 3];
									arr[i][j + 3] = temp;
								}
							for (int i = 0; i < 6; i++) {
								for (int j = 0; j < 6; j++) {
									cout << arr[i][j] << " ";
								}
								cout << endl;
							}
							gotoxy(0, 15);

							break;
						}
						case (2): {

							int arr[8][8];
							for (int i = 0; i < 8; i++) {
								for (int j = 0; j < 8; j++) {
									arr[i][j] = 10 + rand() % 90;
								}
							}
							for (int i = 0; i < 8; i++) {
								for (int j = 0; j < 8; j++) {
									cout << arr[i][j] << " ";
								}
								cout << endl;
							}
							cout << endl;
							for (int i = 0; i < 4; ++i)
								for (int j = 0; j < 4; ++j) {
									int temp = arr[i][j];
									arr[i][j] = arr[i + 4][j + 4];
									arr[i + 4][j + 4] = temp;
									temp = arr[i + 4][j];
									arr[i + 4][j] = arr[i][j + 4];
									arr[i][j + 4] = temp;
								}
							for (int i = 0; i < 8; i++) {
								for (int j = 0; j < 8; j++) {
									cout << arr[i][j] << " ";
								}
								cout << endl;
							}
							gotoxy(0, 20);

							break;
						}
						case (3): {

							int arr[10][10];
							for (int i = 0; i < 10; i++) {
								for (int j = 0; j < 10; j++) {
									arr[i][j] = 10 + rand() % 90;
								}
							}
							for (int i = 0; i < 10; i++) {
								for (int j = 0; j < 10; j++) {
									cout << arr[i][j] << " ";
								}
								cout << endl;
							}
							cout << endl;
							for (int i = 0; i < 5; ++i)
								for (int j = 0; j < 5; ++j) {
									int temp = arr[i][j];
									arr[i][j] = arr[i + 5][j + 5];
									arr[i + 5][j + 5] = temp;
									temp = arr[i + 5][j];
									arr[i + 5][j] = arr[i][j + 5];
									arr[i][j + 5] = temp;
								}
							for (int i = 0; i < 10; i++) {
								for (int j = 0; j < 10; j++) {
									cout << arr[i][j] << " ";
								}
								cout << endl;
							}
							gotoxy(0, 22);

							break;
						}
						}
					} while (answer != 4);
					break;
				}
				case(5): {
					do {
						SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
						cout << "Выберите размер матрицы: " << endl;
						SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
						cout << endl;
						cout << "1. Матрица 6x6" << endl;
						cout << "2. Матрица 8x8" << endl;
						cout << "3. Матрица 10x10" << endl;
						cout << "4.";
						SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
						cout << " <———" << endl;
						SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
						cin >> answer;
						system("CLS");

						switch (answer)
						{
						case (1): {

							int arr[6][6];
							for (int i = 0; i < 6; i++) {
								for (int j = 0; j < 6; j++) {
									arr[i][j] = 10 + rand() % 90;
								}
							}
							for (int i = 0; i < 6; i++) {
								for (int j = 0; j < 6; j++) {
									cout << arr[i][j] << " ";
								}
								cout << endl;
							}
							cout << endl;
							for (int i = 0; i < 3; ++i)
								for (int j = 0; j < 6; ++j) {
									int temp = arr[i][j];
									arr[i][j] = arr[i + 3][j];
									arr[i + 3][j] = temp;

								}
							for (int i = 0; i < 6; i++) {
								for (int j = 0; j < 6; j++) {
									cout << arr[i][j] << " ";
								}
								cout << endl;
							}
							gotoxy(0, 15);

							break;
						}
						case (2): {

							int arr[8][8];
							for (int i = 0; i < 8; i++) {
								for (int j = 0; j < 8; j++) {
									arr[i][j] = 10 + rand() % 90;
								}
							}
							for (int i = 0; i < 8; i++) {
								for (int j = 0; j < 8; j++) {
									cout << arr[i][j] << " ";
								}
								cout << endl;
							}
							cout << endl;
							for (int i = 0; i < 4; ++i)
								for (int j = 0; j < 8; ++j) {
									int temp = arr[i][j];
									arr[i][j] = arr[i + 4][j];
									arr[i + 4][j] = temp;
								}
							for (int i = 0; i < 8; i++) {
								for (int j = 0; j < 8; j++) {
									cout << arr[i][j] << " ";
								}
								cout << endl;
							}
							gotoxy(0, 20);

							break;
						}
						case (3): {

							int arr[10][10];
							for (int i = 0; i < 10; i++) {
								for (int j = 0; j < 10; j++) {
									arr[i][j] = 10 + rand() % 90;
								}
							}
							for (int i = 0; i < 10; i++) {
								for (int j = 0; j < 10; j++) {
									cout << arr[i][j] << " ";
								}
								cout << endl;
							}
							cout << endl;
							for (int i = 0; i < 5; ++i)
								for (int j = 0; j < 10; ++j) {
									int temp = arr[i][j];
									arr[i][j] = arr[i + 5][j];
									arr[i + 5][j] = temp;
								}
							for (int i = 0; i < 10; i++) {
								for (int j = 0; j < 10; j++) {
									cout << arr[i][j] << " ";
								}
								cout << endl;
							}
							gotoxy(0, 22);

							break;
						}
						}
					} while (answer != 4);
					break;
				}

				case(6): {
					do {
						SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
						cout << "Выберите размер матрицы: " << endl;
						SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
						cout << endl;
						cout << "1. Матрица 6x6" << endl;
						cout << "2. Матрица 8x8" << endl;
						cout << "3. Матрица 10x10" << endl;
						cout << "4.";
						SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
						cout << " <———" << endl;
						SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
						cin >> answer;
						system("CLS");

						switch (answer)
						{
						case (1): {

							int arr[6][6];
							for (int i = 0; i < 6; i++) {
								for (int j = 0; j < 6; j++) {
									arr[i][j] = 10 + rand() % 90;
								}
							}
							for (int i = 0; i < 6; i++) {
								for (int j = 0; j < 6; j++) {
									cout << arr[i][j] << " ";
								}
								cout << endl;
							}
							cout << endl;
							for (int i = 0; i < 6; ++i)
								for (int j = 0; j < 3; ++j) {
									int temp = arr[i][j];
									arr[i][j] = arr[i][j + 3];
									arr[i][j + 3] = temp;

								}
							for (int i = 0; i < 6; i++) {
								for (int j = 0; j < 6; j++) {
									cout << arr[i][j] << " ";
								}
								cout << endl;
							}
							gotoxy(0, 15);

							break;
						}
						case (2): {

							int arr[8][8];
							for (int i = 0; i < 8; i++) {
								for (int j = 0; j < 8; j++) {
									arr[i][j] = 10 + rand() % 90;
								}
							}
							for (int i = 0; i < 8; i++) {
								for (int j = 0; j < 8; j++) {
									cout << arr[i][j] << " ";
								}
								cout << endl;
							}
							cout << endl;
							for (int i = 0; i < 8; ++i)
								for (int j = 0; j < 4; ++j) {
									int temp = arr[i][j];
									arr[i][j] = arr[i][j + 4];
									arr[i][j + 4] = temp;
								}
							for (int i = 0; i < 8; i++) {
								for (int j = 0; j < 8; j++) {
									cout << arr[i][j] << " ";
								}
								cout << endl;
							}
							gotoxy(0, 20);

							break;
						}
						case (3): {

							int arr[10][10];
							for (int i = 0; i < 10; i++) {
								for (int j = 0; j < 10; j++) {
									arr[i][j] = 10 + rand() % 90;
								}
							}
							for (int i = 0; i < 10; i++) {
								for (int j = 0; j < 10; j++) {
									cout << arr[i][j] << " ";
								}
								cout << endl;
							}
							cout << endl;
							for (int i = 0; i < 10; ++i)
								for (int j = 0; j < 5; ++j) {
									int temp = arr[i][j];
									arr[i][j] = arr[i][j + 5];
									arr[i][j + 5] = temp;
								}
							for (int i = 0; i < 10; i++) {
								for (int j = 0; j < 10; j++) {
									cout << arr[i][j] << " ";
								}
								cout << endl;
							}
							gotoxy(0, 22);

							break;
						}
						}
					} while (answer != 4);
					break;
				}
				case(7): {
					do {
						SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
						cout << "Выберите размер матрицы: " << endl;
						SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
						cout << endl;
						cout << "1. Матрица 6x6" << endl;
						cout << "2. Матрица 8x8" << endl;
						cout << "3. Матрица 10x10" << endl;
						cout << "4.";
						SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
						cout << " <———" << endl;
						SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
						cin >> answer;
						system("CLS");

						switch (answer)
						{
						case (1): {

							int arr[6][6];
							for (int i = 0; i < 6; i++) {
								for (int j = 0; j < 6; j++) {
									*(*(arr + i) + j) = 10 + rand() % 90;
								}
							}
							for (int i = 0; i < 6; i++) {
								for (int j = 0; j < 6; j++) {
									cout << *(*(arr + i) + j) << " ";
								}
								cout << endl;
							}
							cout << endl;

							for (int i = 0; i < 36; i++)
								for (int j = 0; j < 35; j++)
									if (*(*arr + j) > *(*arr + j + 1))
										swap(*(*arr + j), *(*arr + j + 1));

							for (int i = 0; i < 6; i++) {
								for (int j = 0; j < 6; j++) {
									cout << *(*(arr + i) + j) << " ";
								}
								cout << endl;
							}
							gotoxy(0, 15);

							break;
						}
						case (2): {

							int arr[8][8];
							for (int i = 0; i < 8; i++) {
								for (int j = 0; j < 8; j++) {
									*(*(arr + i) + j) = 10 + rand() % 90;
								}
							}
							for (int i = 0; i < 8; i++) {
								for (int j = 0; j < 8; j++) {
									cout << *(*(arr + i) + j) << " ";
								}
								cout << endl;
							}
							cout << endl;

							for (int i = 0; i < 64; i++)
								for (int j = 0; j < 63; j++)
									if (*(*arr + j) > *(*arr + j + 1))
										swap(*(*arr + j), *(*arr + j + 1));

							for (int i = 0; i < 8; i++) {
								for (int j = 0; j < 8; j++) {
									cout << *(*(arr + i) + j) << " ";
								}
								cout << endl;
							}
							gotoxy(0, 20);

							break;
						}
						case (3): {

							int arr[10][10];
							for (int i = 0; i < 10; i++) {
								for (int j = 0; j < 10; j++) {
									*(*(arr + i) + j) = 10 + rand() % 90;
								}
							}
							for (int i = 0; i < 10; i++) {
								for (int j = 0; j < 10; j++) {
									cout << *(*(arr + i) + j) << " ";
								}
								cout << endl;
							}
							cout << endl;

							for (int i = 0; i < 100; i++)
								for (int j = 0; j < 99; j++)
									if (*(*arr + j) > *(*arr + j + 1))
										swap(*(*arr + j), *(*arr + j + 1));

							for (int i = 0; i < 10; i++) {
								for (int j = 0; j < 10; j++) {
									cout << *(*(arr + i) + j) << " ";
								}
								cout << endl;
							}
							gotoxy(0, 22);

							break;
						}
						}
					} while (answer != 4);
					break;
				}
				case(8): {
					do {
						SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
						cout << "Выберите размер матрицы: " << endl;
						SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
						cout << endl;
						cout << "1. Матрица 6x6" << endl;
						cout << "2. Матрица 8x8" << endl;
						cout << "3. Матрица 10x10" << endl;
						cout << "4.";
						SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
						cout << " <———" << endl;
						SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
						cin >> answer;
						system("CLS");

						switch (answer)
						{
						case (1): {
							int m;
							cout << "Введите число: ";
							SetConsoleTextAttribute(N, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
							cin >> m;
							SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
							cout << endl;
							do {


								cout << "1. Уменьшить все элементы матрицы на введенное число " << endl;
								cout << "2. Увеличить все элементы матрицы на введенное число " << endl;
								cout << "3. Умножить все элементы матрицы на введенное число " << endl;
								cout << "4. Разделить все элементы матрицы на введенное число " << endl;
								cout << "5.";
								SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
								cout << " <———" << endl;
								SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);

								cin >> answer_2;
								system("CLS");

								switch (answer_2)
								{
								case (1): {
									int arr[6][6];
									for (int i = 0; i < 6; i++) {
										for (int j = 0; j < 6; j++) {
											arr[i][j] = 10 + rand() % 90;
										}
									}

									for (int i = 0; i < 6; i++) {
										for (int j = 0; j < 6; j++) {
											cout << arr[i][j] << " ";
										}
										cout << endl;
									}
									cout << endl;
									for (int i = 0; i < 6; i++) {
										for (int j = 0; j < 6; j++) {
											arr[i][j] -= m;
										}
									}
									for (int i = 0; i < 6; i++) {
										for (int j = 0; j < 6; j++) {
											cout << arr[i][j] << " ";
										}
										cout << endl;
									}
									gotoxy(0, 15);
									break;

								}

								case (2): {
									int arr[6][6];
									for (int i = 0; i < 6; i++) {
										for (int j = 0; j < 6; j++) {
											arr[i][j] = 10 + rand() % 90;
										}
									}

									for (int i = 0; i < 6; i++) {
										for (int j = 0; j < 6; j++) {
											cout << arr[i][j] << " ";
										}
										cout << endl;
									}
									cout << endl;
									for (int i = 0; i < 6; i++) {
										for (int j = 0; j < 6; j++) {
											arr[i][j] += m;
										}
									}
									for (int i = 0; i < 6; i++) {
										for (int j = 0; j < 6; j++) {
											cout << arr[i][j] << " ";
										}
										cout << endl;
									}
									gotoxy(0, 15);
									break;

								}
								case (3): {
									int arr[6][6];
									for (int i = 0; i < 6; i++) {
										for (int j = 0; j < 6; j++) {
											arr[i][j] = 10 + rand() % 90;
										}
									}

									for (int i = 0; i < 6; i++) {
										for (int j = 0; j < 6; j++) {
											cout << arr[i][j] << " ";
										}
										cout << endl;
									}
									cout << endl;
									for (int i = 0; i < 6; i++) {
										for (int j = 0; j < 6; j++) {
											arr[i][j] *= m;
										}
									}
									for (int i = 0; i < 6; i++) {
										for (int j = 0; j < 6; j++) {
											cout << arr[i][j] << " ";
										}
										cout << endl;
									}
									gotoxy(0, 15);
									break;

								}
								case (4): {
									int arr[6][6];
									for (int i = 0; i < 6; i++) {
										for (int j = 0; j < 6; j++) {
											arr[i][j] = 10 + rand() % 90;
										}
									}

									for (int i = 0; i < 6; i++) {
										for (int j = 0; j < 6; j++) {
											cout << arr[i][j] << " ";
										}
										cout << endl;
									}
									cout << endl;
									for (int i = 0; i < 6; i++) {
										for (int j = 0; j < 6; j++) {
											arr[i][j] /= m;
										}
									}
									for (int i = 0; i < 6; i++) {
										for (int j = 0; j < 6; j++) {
											cout << arr[i][j] << " ";
										}
										cout << endl;
									}
									gotoxy(0, 15);
									break;

								}

								}
							} while (answer_2 != 5);
							break;
						}
						case (2): {
							int m;
							cout << "Введите число: ";
							SetConsoleTextAttribute(N, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
							cin >> m;
							SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
							cout << endl;
							do {


								cout << "1. Уменьшить все элементы матрицы на введенное число " << endl;
								cout << "2. Увеличить все элементы матрицы на введенное число " << endl;
								cout << "3. Умножить все элементы матрицы на введенное число " << endl;
								cout << "4. Разделить все элементы матрицы на введенное число " << endl;
								cout << "5.";
								SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
								cout << " <———" << endl;
								SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
								cin >> answer_2;
								system("CLS");

								switch (answer_2)
								{
								case (1): {
									int arr[8][8];
									for (int i = 0; i < 8; i++) {
										for (int j = 0; j < 8; j++) {
											arr[i][j] = 10 + rand() % 90;
										}
									}

									for (int i = 0; i < 8; i++) {
										for (int j = 0; j < 8; j++) {
											cout << arr[i][j] << " ";
										}
										cout << endl;
									}
									cout << endl;
									for (int i = 0; i < 8; i++) {
										for (int j = 0; j < 8; j++) {
											arr[i][j] -= m;
										}
									}
									for (int i = 0; i < 8; i++) {
										for (int j = 0; j < 8; j++) {
											cout << arr[i][j] << " ";
										}
										cout << endl;
									}
									gotoxy(0, 20);
									break;

								}

								case (2): {
									int arr[8][8];
									for (int i = 0; i < 8; i++) {
										for (int j = 0; j < 8; j++) {
											arr[i][j] = 10 + rand() % 90;
										}
									}

									for (int i = 0; i < 8; i++) {
										for (int j = 0; j < 8; j++) {
											cout << arr[i][j] << " ";
										}
										cout << endl;
									}
									cout << endl;
									for (int i = 0; i < 8; i++) {
										for (int j = 0; j < 8; j++) {
											arr[i][j] += m;
										}
									}
									for (int i = 0; i < 8; i++) {
										for (int j = 0; j < 8; j++) {
											cout << arr[i][j] << " ";
										}
										cout << endl;
									}
									gotoxy(0, 20);
									break;

								}
								case (3): {
									int arr[8][8];
									for (int i = 0; i < 8; i++) {
										for (int j = 0; j < 8; j++) {
											arr[i][j] = 10 + rand() % 90;
										}
									}

									for (int i = 0; i < 8; i++) {
										for (int j = 0; j < 8; j++) {
											cout << arr[i][j] << " ";
										}
										cout << endl;
									}
									cout << endl;
									for (int i = 0; i < 8; i++) {
										for (int j = 0; j < 8; j++) {
											arr[i][j] *= m;
										}
									}
									for (int i = 0; i < 8; i++) {
										for (int j = 0; j < 8; j++) {
											cout << arr[i][j] << " ";
										}
										cout << endl;
									}
									gotoxy(0, 20);
									break;

								}
								case (4): {
									int arr[8][8];
									for (int i = 0; i < 8; i++) {
										for (int j = 0; j < 8; j++) {
											arr[i][j] = 10 + rand() % 90;
										}
									}

									for (int i = 0; i < 8; i++) {
										for (int j = 0; j < 8; j++) {
											cout << arr[i][j] << " ";
										}
										cout << endl;
									}
									cout << endl;
									for (int i = 0; i < 8; i++) {
										for (int j = 0; j < 8; j++) {
											arr[i][j] /= m;
										}
									}
									for (int i = 0; i < 8; i++) {
										for (int j = 0; j < 8; j++) {
											cout << arr[i][j] << " ";
										}
										cout << endl;
									}
									gotoxy(0, 20);

									break;
								}

								}
							} while (answer_2 != 5);
							break;
						}
						case (3): {
							int m;
							cout << "Введите число: ";
							SetConsoleTextAttribute(N, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
							cin >> m;
							SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
							cout << endl;
							do {


								cout << "1. Уменьшить все элементы матрицы на введенное число " << endl;
								cout << "2. Увеличить все элементы матрицы на введенное число " << endl;
								cout << "3. Умножить все элементы матрицы на введенное число " << endl;
								cout << "4. Разделить все элементы матрицы на введенное число " << endl;
								cout << "5.";
								SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
								cout << " <———" << endl;
								SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
								cin >> answer_2;
								system("CLS");

								switch (answer_2)
								{
								case (1): {
									int arr[10][10];
									for (int i = 0; i < 10; i++) {
										for (int j = 0; j < 10; j++) {
											arr[i][j] = 10 + rand() % 90;
										}
									}

									for (int i = 0; i < 10; i++) {
										for (int j = 0; j < 10; j++) {
											cout << arr[i][j] << " ";
										}
										cout << endl;
									}
									cout << endl;
									for (int i = 0; i < 10; i++) {
										for (int j = 0; j < 10; j++) {
											arr[i][j] -= m;
										}
									}
									for (int i = 0; i < 10; i++) {
										for (int j = 0; j < 10; j++) {
											cout << arr[i][j] << " ";
										}
										cout << endl;
									}
									gotoxy(0, 22);
									break;
								}

								case (2): {
									int arr[10][10];
									for (int i = 0; i < 10; i++) {
										for (int j = 0; j < 10; j++) {
											arr[i][j] = 10 + rand() % 90;
										}
									}

									for (int i = 0; i < 10; i++) {
										for (int j = 0; j < 10; j++) {
											cout << arr[i][j] << " ";
										}
										cout << endl;
									}
									cout << endl;
									for (int i = 0; i < 10; i++) {
										for (int j = 0; j < 10; j++) {
											arr[i][j] += m;
										}
									}
									for (int i = 0; i < 10; i++) {
										for (int j = 0; j < 10; j++) {
											cout << arr[i][j] << " ";
										}
										cout << endl;
									}
									gotoxy(0, 22);
									break;

								}
								case (3): {
									int arr[10][10];
									for (int i = 0; i < 10; i++) {
										for (int j = 0; j < 10; j++) {
											arr[i][j] = 10 + rand() % 90;
										}
									}

									for (int i = 0; i < 10; i++) {
										for (int j = 0; j < 10; j++) {
											cout << arr[i][j] << " ";
										}
										cout << endl;
									}
									cout << endl;
									for (int i = 0; i < 10; i++) {
										for (int j = 0; j < 10; j++) {
											arr[i][j] *= m;
										}
									}
									for (int i = 0; i < 10; i++) {
										for (int j = 0; j < 10; j++) {
											cout << arr[i][j] << " ";
										}
										cout << endl;
									}
									gotoxy(0, 22);
									break;

								}
								case (4): {
									int arr[10][10];
									for (int i = 0; i < 10; i++) {
										for (int j = 0; j < 10; j++) {
											arr[i][j] = 10 + rand() % 90;
										}
									}

									for (int i = 0; i < 10; i++) {
										for (int j = 0; j < 10; j++) {
											cout << arr[i][j] << " ";
										}
										cout << endl;
									}
									cout << endl;
									for (int i = 0; i < 10; i++) {
										for (int j = 0; j < 10; j++) {
											arr[i][j] /= m;
										}
									}
									for (int i = 0; i < 10; i++) {
										for (int j = 0; j < 10; j++) {
											cout << arr[i][j] << " ";
										}
										cout << endl;
									}
									gotoxy(0, 22);
									break;

								}

								}
							} while (answer_2 != 5);
							break;
						}
						}
					} while (answer != 4);
					break;
				}
						 break;
				}
			}





			break;
		}
		case (4): {


			 int answer = 0;
            string a;

            SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
            cout << "Введите строку: ";
            SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
			cin.ignore();
			getline(cin, a);

            bool filter_all = a.find_first_not_of(",.:;?!-()'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ ") != string::npos;


            bool l10 = 0;
            stringstream b1(a);
            string tmp1;
            int num_words = 0;
            while (b1 >> tmp1) {
                num_words++;
                if ((tmp1.size() >= 10) || (tmp1.size() < 1)) {
                    l10 = 1;
                }
            }


            if ((l10 == 1) || (num_words < 1) || (num_words >= 50) || (filter_all == 1)) {
                SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_INTENSITY);
                cout << "Ошибка." << endl;
                cout << "Удостоверьтесь, что выполнены следующие условия: " << endl;
                SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
                cout << "1.Строка должна содержать 1-50 слов." << endl;
                cout << "2.Слова в строке должны содержать 1-10 символов." << endl;
                cout << "3.Предусмотрено использование только латинских букв." << endl;
            }
            while (answer != 6) {
                SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
                cout << "Выберите задание: " << endl;
                cout << endl;
                SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);

                cout << "1. Отредактировать строку. " << endl;
                cout << "2. ";
                SetConsoleTextAttribute(N, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
                cout << "(Вариант 6) ";
                SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
                cout << "Вывести на экран слова, содержащие: " << endl;
                cout << "а)буквы" << endl;
                cout << "б)цифры" << endl;
                cout << "в)буквы и цифры" << endl;

                cout << "3. ";
                SetConsoleTextAttribute(N, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
                cout << "(Вариант 4) ";
                SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
                cout << "Заменить цифры на буквы латинского алфавита. " << endl;
                cout << "4. Найти подстроку в строке. ";
                SetConsoleTextAttribute(N, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
                cout << "(линейный поиск и алгоритм КМП)" << endl;
                SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
                cout << "5. ";
                SetConsoleTextAttribute(N, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
                cout << "(*) ";
                SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
                cout << "Работать со строкой из файла." << endl;
                cout << "6. ";
				SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
				cout << " <———" << endl;
				SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
                cin >> answer;
                system("CLS");
                switch (answer)
                {
                case (1): {

                    string a1;
                    string a2;
                    transform(a.begin(), a.end(), a.begin(), tolower);
                    a[0] = toupper(a[0]);
                    auto p1 = unique_copy(a.begin(), a.end(), back_inserter(a1), check_space);
                    auto p2 = unique_copy(a1.begin(), a1.end(), back_inserter(a2), check_punctuation);

                    SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
                    cout << "Отредактированная строка: ";
                    SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_INTENSITY);

                    cout << a2 + "." << endl;
                    cout << endl;
                    break;
                }
                case (2): {
                    string a1;
                    string a2;
                    transform(a.begin(), a.end(), a.begin(), tolower);
                    a[0] = toupper(a[0]);
                    auto p1 = unique_copy(a.begin(), a.end(), back_inserter(a1), check_space);
                    auto p2 = unique_copy(a1.begin(), a1.end(), back_inserter(a2), check_punctuation);

                    string let;
                    string num;
                    string let_num;
                    string si = a2;
                    istringstream ss1(si);

                    SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
                    cout << "Строка: ";
                    SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
                    cout << si + "." << endl;
                    while (ss1 >> si) {

                        if (is_digits(si) == 1) {
                            num += si;
                            num += " ";
                        }
                        if (is_letters(si) == 1) {
                            let += si;
                            let += " ";
                        }
                        if ((is_letters(si) == 0) && (is_digits(si) == 0)) {
                            let_num += si;
                            let_num += " ";
                        }
                    }

                    cout << "Слова, содержащие только буквы: " << let << endl;
                    cout << "Слова, содержащие только цифры: " << num << endl;
                    cout << "Слова, содержащие и буквы, и цифры: " << let_num << endl;
                    cout << endl;
                    break;
                }
                case (3): {
                    string a1;
                    string a2;
                    transform(a.begin(), a.end(), a.begin(), tolower);
                    a[0] = toupper(a[0]);
                    auto p1 = unique_copy(a.begin(), a.end(), back_inserter(a1), check_space);
                    auto p2 = unique_copy(a1.begin(), a1.end(), back_inserter(a2), check_punctuation);

                    string sw = a2;
                    replace(sw.begin(), sw.end(), '0', 'a');
                    replace(sw.begin(), sw.end(), '1', 'b');
                    replace(sw.begin(), sw.end(), '2', 'c');
                    replace(sw.begin(), sw.end(), '3', 'd');
                    replace(sw.begin(), sw.end(), '4', 'e');
                    replace(sw.begin(), sw.end(), '5', 'f');
                    replace(sw.begin(), sw.end(), '6', 'g');
                    replace(sw.begin(), sw.end(), '7', 'h');
                    replace(sw.begin(), sw.end(), '8', 'i');
                    replace(sw.begin(), sw.end(), '9', 'j');

                    SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
                    cout << "Отредактированная строка: ";
                    SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_INTENSITY);

                    cout << sw +"."<< endl;
                    cout << endl;
                    break;
                }
                case (4): {


                    string sub;
                    SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
                    cout << "Введите подстроку: ";
                    SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
                    cin >> sub;
                    cout << endl;

                    //////////////////////////////////ЛИНЕЙНЫЙ ПОИСК
                    auto start3 = chrono::high_resolution_clock::now();
                    linear(a, sub);
                    cout << endl;
                    auto end3 = chrono::high_resolution_clock::now();
                    chrono::duration<float> duration3 = end3 - start3;
                    cout.setf(ios::fixed, ios::floatfield);
                    cout.precision(7);
                    cout << endl;
                    SetConsoleTextAttribute(N, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
                    cout << "Время, потраченное на линейный поиск: ";
                    SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
                    cout << duration3.count() << endl;
                    cout << endl;


                    ////////////////////////////////// КМП
                    auto start2 = chrono::high_resolution_clock::now();
                    kmp(a, sub);
                    cout << endl;
                    auto end2 = chrono::high_resolution_clock::now();
                    chrono::duration<float> duration2 = end2 - start2;
                    cout.setf(ios::fixed, ios::floatfield);
                    cout.precision(7);
                    cout << endl;
                    SetConsoleTextAttribute(N, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
                    cout << "Время, потраченное на алгоритм КМП: ";
                    SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
                    cout << duration2.count() << endl;
                    cout << endl;
                    break;

                }
                case (5): {
                    string f = ("tHe qUIck,,,,,   bRoWn        fOX juMPs         oVeR tHE    laZy dOg........    a2     120 36 6");
                    ofstream file;
                    file.open("sample.txt");

                    if (file.is_open()) {
                        cout << "Файл открыт!" << endl;
                        cout << endl;
                        file << f;
                        SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
                        cout << "Строка: ";
                        SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
                        cout << f << endl;
                        cout << endl;

                    }
                    else {
                        cout << "Ошибка при обработке файла.";
                    }

                    int answer_1 = 0;
                    file.close();

                    while (answer_1 != 5) {
                        SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
                        cout << "Выберите задание: " << endl;
                        cout << endl;
                        SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);

                        cout << "1. Отредактировать строку. " << endl;
                        cout << "2. ";
                        SetConsoleTextAttribute(N, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
                        cout << "(Вариант 6) ";
                        SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
                        cout << "Вывести на экран слова, содержащие: " << endl;
                        cout << "а)буквы" << endl;
                        cout << "б)цифры" << endl;
                        cout << "в)буквы и цифры" << endl;

                        cout << "3. ";
                        SetConsoleTextAttribute(N, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
                        cout << "(Вариант 4) ";
                        SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
                        cout << "Заменить цифры на буквы латинского алфавита. " << endl;
                        cout << "4. Найти подстроку в строке. ";
                        SetConsoleTextAttribute(N, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
                        cout << "(линейный поиск и алгоритм КМП)" << endl;
                        SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
                        cout << "5. ";
                        SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
                        cout << "<——— " << endl;
                        SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
                        cin >> answer_1;
                        system("CLS");
                        switch (answer_1)
                        {
                        case (1): {

                            string f1;
                            string f2;
                            transform(f.begin(), f.end(), f.begin(), tolower);
                            f[0] = toupper(f[0]);
                            auto p1 = unique_copy(f.begin(), f.end(), back_inserter(f1), check_space);
                            auto p2 = unique_copy(f1.begin(), f1.end(), back_inserter(f2), check_punctuation);

                            SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
                            cout << "Отредактированная строка: " << endl;
                            SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_INTENSITY);

                            cout << f2 + "." << endl;
                            cout << endl;
                            break;
                        }
                        case (2): {
                            string f1;
                            string f2;
                            transform(f.begin(), f.end(), f.begin(), tolower);
                            f[0] = toupper(f[0]);
                            auto p1 = unique_copy(f.begin(), f.end(), back_inserter(f1), check_space);
                            auto p2 = unique_copy(f1.begin(), f1.end(), back_inserter(f2), check_punctuation);

                            cout << endl;
                            string let;
                            string num;
                            string let_num;
                            string si = f2;
                            istringstream ss(si);
                            SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
                            cout << "Строка: ";
                            SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
                            cout << si + "." << endl;
                            while (ss >> si) {

                                if (is_digits(si) == 1) {
                                    num += si;
                                    num += " ";
                                }
                                if (is_letters(si) == 1) {
                                    let += si;
                                    let += " ";
                                }
                                if ((is_letters(si) == 0) && (is_digits(si) == 0)) {
                                    let_num += si;
                                    let_num += " ";
                                }
                            }

                            cout << "Слова, содержащие только буквы: " << let << endl;
                            cout << "Слова, содержащие только цифры: " << num << endl;
                            cout << "Слова, содержащие и буквы, и цифры: " << let_num << endl;
                            cout << endl;
                            break;
                        }
                        case (3): {

                            string f1;
                            string f2;
                            transform(f.begin(), f.end(), f.begin(), tolower);
                            f[0] = toupper(f[0]);
                            auto p1 = unique_copy(f.begin(), f.end(), back_inserter(f1), check_space);
                            auto p2 = unique_copy(f1.begin(), f1.end(), back_inserter(f2), check_punctuation);


                            string sw = f2;
                            replace(sw.begin(), sw.end(), '0', 'a');
                            replace(sw.begin(), sw.end(), '1', 'b');
                            replace(sw.begin(), sw.end(), '2', 'c');
                            replace(sw.begin(), sw.end(), '3', 'd');
                            replace(sw.begin(), sw.end(), '4', 'e');
                            replace(sw.begin(), sw.end(), '5', 'f');
                            replace(sw.begin(), sw.end(), '6', 'g');
                            replace(sw.begin(), sw.end(), '7', 'h');
                            replace(sw.begin(), sw.end(), '8', 'i');
                            replace(sw.begin(), sw.end(), '9', 'j');

                            SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
                            cout << "Отредактированная строка: ";
                            SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_INTENSITY);

                            cout << sw + "." << endl;
                            cout << endl;
                            break;
                        }
                        case (4): {

                            string f1;
                            string f2;
                            transform(f.begin(), f.end(), f.begin(), tolower);
                            f[0] = toupper(f[0]);
                            auto p11 = unique_copy(f.begin(), f.end(), back_inserter(f1), check_space);
                            auto p22 = unique_copy(f1.begin(), f1.end(), back_inserter(f2), check_punctuation);


                            string sub;
                            SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_INTENSITY);
                            cout << "Введите подстроку: ";
                            SetConsoleTextAttribute(N, FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
                            cin >> sub;
                            cout << endl;

                            //////////////////////////////////ЛИНЕЙНЫЙ ПОИСК
                            auto start3 = chrono::high_resolution_clock::now();
                            linear(f2, sub);
                            cout << endl;
                            auto end3 = chrono::high_resolution_clock::now();
                            chrono::duration<float> duration3 = end3 - start3;
                            cout.setf(ios::fixed, ios::floatfield);
                            cout.precision(7);
                            cout << endl;
                            SetConsoleTextAttribute(N, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
                            cout << "Время, потраченное на линейный поиск: ";
                            SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
                            cout << duration3.count() << endl;
                            cout << endl;


                            ////////////////////////////////// КМП
                            auto start2 = chrono::high_resolution_clock::now();
                            kmp(f2, sub);
                            cout << endl;
                            auto end2 = chrono::high_resolution_clock::now();
                            chrono::duration<float> duration2 = end2 - start2;
                            cout.setf(ios::fixed, ios::floatfield);
                            cout.precision(7);
                            cout << endl;
                            SetConsoleTextAttribute(N, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
                            cout << "Время, потраченное на алгоритм КМП: ";
                            SetConsoleTextAttribute(N, FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
                            cout << duration2.count() << endl;
                            cout << endl;
                            break;

                        }


                        }
                    }
                

                

                    break;
                }
                 break;

                }

            }



			break;
		}
		}

	}
  return 0;
}
